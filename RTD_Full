#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#include <ArduinoJson.h>
#include <Adafruit_MAX31865.h>
#include <TimeLib.h>
#include <WiFiUdp.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Esp.h>

// WiFi Configuration  
const char* WIFI_SSID = "Tan_Pocket";
const char* WIFI_PASSWORD = "15932456";

// Firebase Configuration
const char* DATABASE_URL = "https://tvo-op3-default-rtdb.firebaseio.com/";
const char* DATABASE_SECRET = "vJl5LpxP4O6vcox76p2PFknSgwDG4O5cEs8yLTLC";

// Power BI Configuration
const char* powerbiUrl = "https://api.powerbi.com/beta/9bc585f9-a8b8-431c-9013-efa7b2b40cdf/datasets/2d0edd16-9f4b-4eac-a861-ef3607905b6a/rows?experience=power-bi&key=J3BDVfqJHNjxfbTtlBnm6x8P18oWRLpt3bLDzS6E3kQqA9dVIlR5SwDwUuhDOMvMHPksyu2KIriQYwpqpurSFg%3D%3D";

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
WiFiClientSecure secureClient;
WiFiClient client;
HTTPClient http;
WiFiUDP Udp;

// Time Configuration
const int timeZone = 7;     // UTC+7 Thailand
unsigned int localPort = 8888;
static const char ntpServerName[] = "pool.ntp.org";
const int NTP_PACKET_SIZE = 48;
byte packetBuffer[NTP_PACKET_SIZE];
String datetime;

// LCD Configuration
LiquidCrystal_I2C lcd(0x27, 16, 2);

// MAX31865 configuration (SPI)
#define MAX_CS   D3  // Chip Select (CS)
#define MAX_CLK  D5  // Clock (SCK)
#define MAX_SDO  D6  // MISO
#define MAX_SDI  D7  // MOSI

// Initialize MAX31865
Adafruit_MAX31865 thermo = Adafruit_MAX31865(MAX_CS, MAX_SDI, MAX_SDO, MAX_CLK);

// Reference resistor value & RTD nominal
#define RREF      430.0
#define RNOMINAL  100.0

// ตัวแปรสำหรับเก็บค่าอุณหภูมิล่าสุด
static float lastTemp = -999;

void initWatchdog() {
 ESP.wdtDisable();
 ESP.wdtEnable(WDTO_8S);
}

void ICACHE_RAM_ATTR handleCrash() {
 ESP.restart();
}

void sendNTPpacket(const char* address) {
 memset(packetBuffer, 0, NTP_PACKET_SIZE);
 packetBuffer[0] = 0b11100011;
 packetBuffer[1] = 0;
 packetBuffer[2] = 6;
 packetBuffer[3] = 0xEC;
 packetBuffer[12] = 49;
 packetBuffer[13] = 0x4E;
 packetBuffer[14] = 49;
 packetBuffer[15] = 52;
 Udp.beginPacket(address, 123);
 Udp.write(packetBuffer, NTP_PACKET_SIZE);
 Udp.endPacket();
}

time_t getNtpTime() {
 while (Udp.parsePacket() > 0) ;
 sendNTPpacket(ntpServerName);
 uint32_t beginWait = millis();
 while (millis() - beginWait < 1500) {
   int size = Udp.parsePacket();
   if (size >= NTP_PACKET_SIZE) {
     Udp.read(packetBuffer, NTP_PACKET_SIZE);
     unsigned long secsSince1900;
     secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
     secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
     secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
     secsSince1900 |= (unsigned long)packetBuffer[43];
     return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
   }
 }
 return 0;
}

void getDatetime() {
 char buffer[25];
 snprintf(buffer, sizeof(buffer), "%04d-%02d-%02d %02d:%02d:%02d",
          year(), month(), day(), hour(), minute(), second());
 datetime = String(buffer);
}

void connectToWiFi() {
 WiFi.mode(WIFI_STA);
 WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
 while (WiFi.status() != WL_CONNECTED) {
   delay(500);
 }
}

bool initFirebase() {
 config.database_url = DATABASE_URL;
 config.signer.tokens.legacy_token = DATABASE_SECRET;
 Firebase.begin(&config, &auth);
 Firebase.reconnectWiFi(true);
 return Firebase.ready();
}

void sendToFirebase(float temperature, String datetime) {
 FirebaseJson json;
 json.set("temperature", temperature);
 
 String pathTimestamp = datetime;
 pathTimestamp.replace(" UTC+07", "");
 pathTimestamp.replace(" ", "_");
 pathTimestamp.replace(":", "-");
 
 String path = "/sensor/" + pathTimestamp;
 
 Firebase.setJSON(fbdo, path, json);
}

void sendToPowerBI(float temperature, String datetime) {
 http.begin(secureClient, powerbiUrl);
 http.addHeader("Content-Type", "application/json");
 String jsonData = "[{\"Temperature\": " + String(temperature, 2) + ", \"Datetime\": \"" + datetime + "\"}]";
 http.POST(jsonData);
 http.end();
}

void updateLCD(float temperature) {
 if (abs(temperature - lastTemp) > 0.1) {
   char tempStr[10];
   sprintf(tempStr, "%-6.2f C", temperature);
   lcd.setCursor(0, 1);
   lcd.print(tempStr);
   lastTemp = temperature;
 }
}

void setup() {  
 // Initialize watchdog
 initWatchdog();
 
 // Initialize LCD
 Wire.begin();
 lcd.begin(16, 2);
 lcd.backlight();
 lcd.clear();
 lcd.setCursor(0, 0);
 lcd.print("Temperature:");
 
 // Initialize WiFi
 WiFi.setAutoReconnect(true);
 WiFi.persistent(true);
 connectToWiFi();
 
 secureClient.setInsecure();
 Udp.begin(localPort);
 
 setSyncProvider(getNtpTime);
 setSyncInterval(300);
 
 while (timeStatus() != timeSet) {
   delay(1000);
 }
 
 if (!initFirebase()) {
   ESP.restart();
 }
 
 // Initialize MAX31865
 if (!thermo.begin(MAX31865_3WIRE)) {
   lcd.setCursor(0, 0);
   lcd.print("Sensor Error!");
   while (1) delay(10);
 }
 
 thermo.setThresholds(0x0000, 0x7fff);
}

void loop() {
 ESP.wdtFeed();
 
 static unsigned long lastWiFiCheck = 0;
 if (millis() - lastWiFiCheck > 10000) {
   lastWiFiCheck = millis();
   if (WiFi.status() != WL_CONNECTED) {
     WiFi.reconnect();
     delay(500);
   }
 }

 // Read temperature
 float temperature = thermo.temperature(RNOMINAL, RREF);
 
 // Check for faults
 uint8_t fault = thermo.readFault();
 if (fault) {
   thermo.clearFault();
   return;
 }
 
 if (!isnan(temperature) && temperature > -50 && temperature < 200) {
   getDatetime();
   updateLCD(temperature);
   sendToFirebase(temperature, datetime);
   sendToPowerBI(temperature, datetime);
 }
 
 delay(5000);
}
